{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nbumper BumperC = bumper(Brain.ThreeWirePort.C);\nmotor rightMotor = motor(PORT1, ratio18_1, false);\n\ndistance Distance9 = distance(PORT9);\noptical Optical2 = optical(PORT2);\nservo ServoB = servo(Brain.ThreeWirePort.B);\nmotor leftMotor = motor(PORT10, ratio18_1, false);\n\nlimit LimitSwitchD = limit(Brain.ThreeWirePort.D);\npot PotentiometerA = pot(Brain.ThreeWirePort.A);\nled LEDE = led(Brain.ThreeWirePort.E);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint lifeCounter = 3;\nint level = 0;\n\n/* When the bumper is pressed, turn on the LEDs\n   for 2 seconds then turn them off until the \n   bumper is pressed again */\nint partThreeProblemOne() {\n  LEDE.off();\n  while (true) {\n    while (!BumperC.pressing()) {}\n    LEDE.on();\n    wait(2, seconds);\n    LEDE.off();\n  }\n  return 0;\n}\n\n/* If the bumper is pressed, decrease the life counter by 1;\n * else, maintain the life counter\n * then, advance to the next level\n * If the lifeCounter reaches zero, the game is over */\nint partThreeProblemTwo() {\n  if (lifeCounter > 0) {\n      level++;\n      Brain.Screen.clearScreen();\n      Brain.Screen.newLine();\n      Brain.Screen.print(\"LifeCounter: \"); Brain.Screen.print(lifeCounter);\n      Brain.Screen.newLine();\n      wait(1, seconds);\n      Brain.Screen.print(\"Level: \"); Brain.Screen.print(level);\n      Brain.Screen.newLine();\n      wait(1, seconds);\n      if(BumperC.pressing()) {\n        Brain.Screen.print(\"LEVEL FAILED\");\n        Brain.Screen.newLine();\n        lifeCounter--;\n      } else {\n        Brain.Screen.print(\"LEVEL SUCCESS\");\n        Brain.Screen.newLine();\n      }\n      wait(5, seconds);\n    } else {\n      Brain.Screen.clearScreen();\n      Brain.Screen.newLine();\n      Brain.Screen.print(\"GAME OVER\");\n      Brain.programStop();\n    }\n    return 0;\n}\n\n/* If the bumper is pressing, continuously spin forward 180 deg;\n * otherwise, stop spinning */\nint partThreeProblemFour() {\n  if (BumperC.pressing()) {\n    rightMotor.spinFor(forward, 180, degrees);\n  } else {\n    rightMotor.stop();\n  }\n  return 0;\n}\n\n/* If the bumper is  pressing,\n * then if the distance to the object is less than 20mm, spin \n * the right motor backwards. otherwise, spin forwards.\n * If the bumper is not pressed,\n * stop the motor.\n */\nint partThreeProblemFive() {\n\n  if (!BumperC.pressing()) {\n    rightMotor.stop();\n  }\n  if (Distance9.objectDistance(mm) < 20) {\n    rightMotor.setVelocity(-50, percent);\n    rightMotor.spin(forward);\n  } else {\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(Distance9.objectDistance(mm));\n    rightMotor.setVelocity(50, percent);\n    rightMotor.spin(forward);\n  }\n  return 0;\n}\n\n/* If the bumper is not being pressed, turn the servo to default position.\n * Otherwise, turn to -50 degrees\n * If the optical sensor senses an object near it, turn to 50 degrees */\nint partThreeProblemSix() {\n  Optical2.setLight(ledState::on);\n  Optical2.setLightPower(100, percent);\n\n  if (!BumperC.pressing()) {\n    ServoB.setPosition(0, degrees);\n    return 0;\n  }\n  if (!Optical2.isNearObject()) {\n    ServoB.setPosition(-50, degrees);\n    return 0;\n  }\n  \n  ServoB.setPosition(50, degrees);\n  return 0;\n}\n\n/*If the bumper switch is being pressed, turn the left motor on\n  If the limit switch is being pressed, turn the right motor on*/\nint partThreeProblemSeven() {\n  leftMotor.spin(forward);\n  rightMotor.spin(forward);\n\n  if (BumperC.pressing()) {\n    leftMotor.setVelocity(50, percent);\n  } else {\n    leftMotor.setVelocity(0, percent);\n  }\n\n  if (LimitSwitchD.pressing()) {\n    rightMotor.setVelocity(50, percent);\n  } else {\n    rightMotor.setVelocity(0, percent);\n  }\n\n  return 0;\n}\n\n/* Spin the right motor four times and \n   print the current count on the screen */\nint partThreeProblemEight() {\n  //Part 1 Provided Code\n\n  int motorCount = 1;\n  while (motorCount < 4) {\n    rightMotor.setVelocity(50, percent);\n    rightMotor.spinFor(forward, 95, degrees);\n    wait(2, seconds);\n    rightMotor.stop();\n    wait(2, seconds);\n    motorCount++;\n  }\n  Brain.Screen.print(motorCount); \n  return 0;\n}\n\n/* Helper function to turn the LED on \n   if the bumper is being pressed*/\nvoid turnLEDon() {\n  if (BumperC.pressing()) {\n    LEDE.on();\n  } else {\n    LEDE.off();\n  }\n}\n\n/* If the bumper is being pressed, turn on the LED\n   and print the closest object distance the distance sensor has read */\nint partThreeProblemTen() {\n  int closest = 10000; //Arbitrary value\n  Brain.Screen.print(closest);\n  Brain.Screen.setCursor(1, 7);\n  Brain.Screen.print(Distance9.objectDistance(mm));\n  Brain.Screen.newLine();\n  while (true) {\n    turnLEDon();\n    while (!BumperC.pressing()) {\n      Brain.Screen.clearLine(2);\n      Brain.Screen.setCursor(2, 1);\n      Brain.Screen.print(closest);\n      Brain.Screen.setCursor(2, 7);\n      Brain.Screen.print(Distance9.objectDistance(mm));\n      if (Distance9.objectDistance(mm) < closest) {\n        closest = Distance9.objectDistance(mm);\n      }\n    }\n  }\n}\n\n/* If the bumper is being pressed, turn on the LED\n   and print the farthest object distance the distance sensor has read */\nint partThreeProblemEleven() {\n  int farthest = Distance9.objectDistance(mm); //Current farthest value\n  Brain.Screen.print(farthest);\n  Brain.Screen.setCursor(1, 7);\n  Brain.Screen.print(Distance9.objectDistance(mm));\n  Brain.Screen.newLine();\n  while (true) {\n    turnLEDon();\n    while (!BumperC.pressing()) {\n      Brain.Screen.clearLine(2);\n      Brain.Screen.setCursor(2, 1);\n      Brain.Screen.print(farthest);\n      Brain.Screen.setCursor(2, 7);\n      Brain.Screen.print(Distance9.objectDistance(mm));\n      if (Distance9.objectDistance(mm) < farthest) {\n        farthest = Distance9.objectDistance(mm);\n      }\n    }\n  }\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  int currentProblem = 0; //Config based on selected problem\n\n  //Set screen typeface\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.setFont(mono30);\n  Brain.Screen.setPenColor(white);\n  wait(15, msec);\n  leftMotor.setVelocity(0, percent);\n  rightMotor.setVelocity(0, percent);\n\n  while (true) {\n    \n    switch (currentProblem) {\n    case 1:\n      partThreeProblemOne();\n      break;\n    case 2:\n      partThreeProblemTwo();\n      break;\n    case 4:\n      partThreeProblemFour();\n      break;\n    case 5:\n      partThreeProblemFive();\n      break;\n    case 6:\n      partThreeProblemSix();\n      break;\n    case 7:\n      partThreeProblemSeven();\n      break;\n    case 8:\n      partThreeProblemEight();\n      break;\n    case 10:\n      partThreeProblemTen();\n      break;\n    case 11:\n      partThreeProblemEleven();\n      break;\n    default:\n      break;\n    }\n  }\n}\n","textLanguage":"cpp","robotConfig":[{"port":[3],"name":"BumperC","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[1],"name":"rightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"Distance9","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[2],"name":"Optical2","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[2],"name":"ServoB","customName":false,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[10],"name":"leftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"LimitSwitchD","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[1],"name":"PotentiometerA","customName":false,"deviceType":"Potentiometer","deviceClass":"pot","setting":{},"triportSourcePort":22},{"port":[5],"name":"LEDE","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}