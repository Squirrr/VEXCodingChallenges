{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nservo ServoB = servo(Brain.ThreeWirePort.B);\nmotor LeftMotor = motor(PORT1, ratio18_1, false);\n\nmotor RightMotor = motor(PORT10, ratio18_1, false);\n\nbumper BumperC = bumper(Brain.ThreeWirePort.C);\nlimit LimitSwitchD = limit(Brain.ThreeWirePort.D);\npot PotentiometerA = pot(Brain.ThreeWirePort.A);\nled LEDF = led(Brain.ThreeWirePort.F);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n/* Set the servo position to val in degrees, print out that position,\n   and wait for the waitTime amount of seconds */\nvoid setServoAndPrint(double val, double waitTime) {\n  ServoB.setPosition(val, degrees);\n  Brain.Screen.print(val);\n  wait(waitTime, seconds);\n}\n\n/* Set the servo position to various angles and wait for set intervals of time \n   before returning to home position */\nvoid partTwoProblemOne() {\n  setServoAndPrint(0, 1);\n  setServoAndPrint(30, 3);\n  setServoAndPrint(0, 3);\n  setServoAndPrint(25, 2);\n  setServoAndPrint(0, 1);\n  setServoAndPrint(16, 3);\n  setServoAndPrint(0, 1);\n  setServoAndPrint(55, 2);\n  setServoAndPrint(0, 0.1);\n}\n\n/* Spin the left motor at certain speeds and times, \n   then stop and spin the right motor to a certain position,\n   and finally print \"Brain Coding is Cool!\" on the screen */\nvoid partTwoProblemTwo() {\n\n  //Spin left motor at 50% velocity for 3 seconds\n  LeftMotor.setVelocity(50, percent);\n  LeftMotor.spin(forward);\n  wait(3, seconds);\n  LeftMotor.stop();\n\n  //Spin left motor at -100% velocity for 3 seconds\n  LeftMotor.setVelocity(100, percent);\n  LeftMotor.spin(reverse);\n  wait(3, seconds);\n  LeftMotor.stop();\n\n  //Spin right motor -180 degrees, then\n  //spin to 100 degrees\n  RightMotor.spinFor(reverse, 180, degrees);\n  RightMotor.spinToPosition(100, degrees);\n\n  //Print \"Brain Coding is Cool!\" for 3 seconds then clear the screen\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.setPenColor(white);\n  Brain.Screen.setFont(mono30);\n  Brain.Screen.print(\"Brain Coding is Cool!\");\n  Brain.Screen.clearScreen();\n  wait(3, seconds);\n}\n\n////////////////////////////////////////////////////////////\n//Part Two Problem Three\n/* Use events and broadcasts to move the motors when the \n   \"motorMotion\" event is broadcast */\nevent motorMotion = event();\n\nvoid onEventMotorMotion() {\n  LeftMotor.setVelocity(50, percent);\n  RightMotor.setVelocity(50, percent);\n  LeftMotor.spin(forward);\n  RightMotor.spin(forward);\n  wait(5, seconds);\n  RightMotor.spin(reverse);\n  wait(5, seconds);\n\n}\n////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////\n//Part Two Problem Four\n/* Use events and broadcasts to move the left and right motors\n   simultaneously when the \"motorMove\" event is broadcast */\nevent motorMove = event();\n\nvoid onEventMotorMoveA() {\n  RightMotor.setVelocity(50, percent);\n  RightMotor.spin(forward);\n  wait(5, seconds);\n  RightMotor.stop();\n  \n}\n\nvoid onEventMotorMoveB() {\n  LeftMotor.setVelocity(75, percent);\n  LeftMotor.spin(reverse);\n  wait(2.5, seconds);\n  LeftMotor.stop();\n}\n////////////////////////////////////////////////////////////\n\n\n/* Turn on the LED and spin the motors when the potentiometer\n   value is >=50%; otherwise, turn everything off */\nvoid partTwoProblemSix() {\n  if (PotentiometerA.angle(percent) >= 50) {\n    LEDF.on();\n    LeftMotor.setVelocity(75, percent);\n    RightMotor.setVelocity(75, percent);\n    LeftMotor.spin(reverse);\n    RightMotor.spin(forward);\n  } else {\n    LeftMotor.stop();\n    RightMotor.stop();\n    LEDF.off();\n  }\n}\n\n\nint main() {\n  int currentProblem = 0; //Config based on selected problem\n\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n\n  //Switch statement to manage problems based on user input\n  switch (currentProblem) {\n    case 1:\n      partTwoProblemOne();\n      break;\n    case 2:\n      partTwoProblemTwo();\n      break;\n    case 3:\n      // Part Two Problem Three Code\n      motorMotion(onEventMotorMotion);\n      wait(15, msec);\n      motorMotion.broadcast();\n      break;\n    case 4:\n      // Part Two Problem Four Code\n      motorMove(onEventMotorMoveA);\n      motorMove(onEventMotorMoveB);\n      wait(15, msec);\n      motorMove.broadcast();\n      break;\n    case 5:\n      //Part Two Problem Five A/B Code\n      while (true) {\n        if (BumperC.pressing()) {\n          motorMove.broadcast();\n        }\n        if (LimitSwitchD.pressing()) {\n          motorMove.broadcast();\n        }\n      }\n      break;\n    case 6:\n      //Part Two Problem Six Code\n      while (true) {\n        partTwoProblemSix();\n      }\n      break;\n    default:\n      break;\n  }\n}\n","textLanguage":"cpp","robotConfig":[{"port":[2],"name":"ServoB","customName":false,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[1],"name":"LeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[10],"name":"RightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[3],"name":"BumperC","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[4],"name":"LimitSwitchD","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{},"triportSourcePort":22},{"port":[1],"name":"PotentiometerA","customName":false,"deviceType":"Potentiometer","deviceClass":"pot","setting":{},"triportSourcePort":22},{"port":[6],"name":"LEDF","customName":false,"deviceType":"LED","deviceClass":"led","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}